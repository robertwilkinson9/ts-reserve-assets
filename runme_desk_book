#!/usr/bin/bash
#
# AKA the procedural way to build containers
# I think the declarative way is better
#
TYPES=("desk" "book")
#
rsync -av ../certs .
#
docker network ls | grep -q mongo-network
NETWORK_EXISTS=$?
if [ ! $NETWORK_EXISTS -eq 0 ]
then
  echo NO MONGO NETWORK
  docker network create mongo-network
fi
#
for TYPE in ${TYPES[@]}; do
	echo
	echo TYPE is $TYPE
	CONFIG_FILE=$(echo ${CONFIG_PREFIX}${TYPE}.json)
	BACKEND=${TYPE}_backend

	docker ps | grep -q my-mongo 
	MONGO_EXISTS=$?
	if [ ! $MONGO_EXISTS -eq 0 ]
	then
	  echo NO MONGO
	  exit 1
	fi

	docker ps | grep -q ${BACKEND}
	BACKEND_EXISTS=$?
	if [ ! $BACKEND_EXISTS -eq 0 ]
	then
	  echo NO BACKEND
	  exit 2
	fi

	DOCKERFILE=Dockerfile.${TYPE}
	API_IP=$(docker inspect $(docker ps| grep ${TYPE}_backend | awk '{print $1}') | jq --raw-output '.[0].NetworkSettings.Networks."mongo-network".IPAddress')
	CONFIG_FILE=$(echo config/config.${TYPE}.json)
	API_PORT=$(cat $CONFIG_FILE | jq --raw-output '.APIPORT')
	FE_PORT=$(cat package.json | jq --raw-output .config.${TYPE})
        echo FE_PORT is $FE_PORT

	docker build -t ${TYPE}_frontend --file ${DOCKERFILE} .
	docker run --detach --network mongo-network --env SSL_KEY=/certs/localhost.key --env SSL_CERT=/certs/localhost.crt --env API_IP=${API_IP} --env VITE_API_IP=${API_IP} --env API_PORT=${API_PORT} -p $FE_PORT:$FE_PORT ${TYPE}_frontend

	DID=$(docker ps | grep ${TYPE}_frontend | awk '{print $NF}')
	DIP=$(docker inspect ${DID} | jq --raw-output '.[0].NetworkSettings.Networks."mongo-network".IPAddress')
	echo ${TYPE}_frontend at https://${DIP}:${FE_PORT}
done
