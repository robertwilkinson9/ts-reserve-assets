#!/usr/bin/bash
TYPES=("desk" "book")
declare -A DIPS
declare -A NMAPS
#
rsync -av ../certs .
#
docker network ls | grep -q mongo-network
NETWORK_EXISTS=$?
if [ ! $NETWORK_EXISTS -eq 0 ]
then
  echo NO MONGO NETWORK
  docker network create mongo-network
fi
#
for TYPE in ${TYPES[@]}; do
	echo
	echo TYPE is $TYPE
	CONFIG_FILE=$(echo ${CONFIG_PREFIX}${TYPE}.json)
	BACKEND=${TYPE}_backend

	docker ps | grep -q my-mongo 
	MONGO_EXISTS=$?
	if [ ! $MONGO_EXISTS -eq 0 ]
	then
	  echo NO MONGO
	  exit 1
	fi

	docker ps | grep -q ${BACKEND}
	BACKEND_EXISTS=$?
	if [ ! $BACKEND_EXISTS -eq 0 ]
	then
	  echo NO BACKEND
	  exit 2
	fi

	DOCKERFILE=Dockerfile.${TYPE}
	API_IP=$(docker inspect ${BACKEND} | grep API_IP | awk -F= '{print $2}' | sed -e 's/",$//')
	API_PORT=$(docker inspect ${TYPE}_backend | grep PORT | awk -F= '{print $2}' | sed -e 's/",$//')
	CONFIG_FILE=$(echo config/config.${TYPE}.json)
	FE_PORT=$(grep FEPORT $CONFIG_FILE | awk '{print $NF}' | sed -e 's/,$//')

	docker build -t ${TYPE}_frontend --file ${DOCKERFILE} .
	docker run --detach --network mongo-network --env SSL_KEY=/certs/localhost.key --env SSL_CERT=/certs/localhost.crt --env API_IP=${API_IP} --env API_PORT=${API_PORT} -p $FE_PORT:$FE_PORT ${TYPE}_frontend

	DID=$(docker ps | grep ${TYPE}_frontend | awk '{print $NF}')
	DIP=$(docker inspect ${DID} | grep IPA | grep 172 | awk '{print $NF}' | sed -e 's/,$//' | sed -e 's/"//g')
	DIPS[$TYPE]=$DIP
	DPORT=$(docker inspect ${DID} | grep HostPort | tail -1 | awk '{print $NF}' | sed -e 's/,$//' | sed -e 's/"//g')

        PSTART=5173 # we use vite so https://vitejs.dev/config/server-options.html#server-port applies
        PSTOP=5210
	NMAPS[$TYPE]="nmap ${DIP} -p ${PSTART}-${PSTOP}"
done
sleep 15
echo
for TYPE in ${TYPES[@]}; do
	NPORT=$(${NMAPS[$TYPE]} | grep open | awk -F/ '{print $1}')
	echo ${TYPE}_frontend at https://${DIPS[$TYPE]}:${NPORT}
done
